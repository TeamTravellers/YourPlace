// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourPlace.Infrastructure.Data;

#nullable disable

namespace YourPlace.Infrastructure.Migrations
{
    [DbContext(typeof(YourPlaceDbContext))]
    [Migration("20240319215854_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Traveller",
                            NormalizedName = "Traveller"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Hotel Manager",
                            NormalizedName = "HotelManager"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Categories", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Atmosphere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pricing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tourism")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.HasIndex("HotelID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Atmosphere = "Calm",
                            Company = "Family",
                            HotelID = 1,
                            Location = "Sea",
                            Pricing = "Lux",
                            Tourism = "Culture"
                        },
                        new
                        {
                            CategoryID = 2,
                            Atmosphere = "Party",
                            Company = "Group",
                            HotelID = 2,
                            Location = "Mountain",
                            Pricing = "InTheMiddle",
                            Tourism = "Adventure"
                        },
                        new
                        {
                            CategoryID = 3,
                            Atmosphere = "Both",
                            Company = "OnePerson",
                            HotelID = 3,
                            Location = "LargeCity",
                            Pricing = "Cheap",
                            Tourism = "Shopping"
                        },
                        new
                        {
                            CategoryID = 4,
                            Atmosphere = "Neither",
                            Company = "Individual",
                            HotelID = 4,
                            Location = "Village",
                            Pricing = "Modern",
                            Tourism = "Relax"
                        },
                        new
                        {
                            CategoryID = 5,
                            Atmosphere = "Party",
                            Company = "Family",
                            HotelID = 5,
                            Location = "Sea",
                            Pricing = "InTheMiddle",
                            Tourism = "Adventure"
                        });
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Hotel", b =>
                {
                    b.Property<int>("HotelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelID");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            HotelID = 1,
                            Address = "ул. Юндола 20",
                            Country = "България",
                            Details = "Хотелът е с чудесен изглед към гората. Има неограничен безплатен Wi-Fi и удобен паркинг. Хотелът разполага с три вътрешни басейна и един външен.",
                            HotelName = "Arte Spa Hotel",
                            MainImageURL = "Arte.jpg",
                            Rating = 9.6999999999999993,
                            Town = "Велинград"
                        },
                        new
                        {
                            HotelID = 2,
                            Address = "ул. Ропотамо 12",
                            Country = "България",
                            Details = "Апартаменти Роуз Гардънс се намират на 50 метра от плажа. Включват сезонен външен басейн и сезонен ресторант, безплатен Wi-Fi и сезонен спа център.",
                            HotelName = "Rose Garden",
                            MainImageURL = "RoseGarden.jpg",
                            Rating = 8.5,
                            Town = "Поморие"
                        },
                        new
                        {
                            HotelID = 3,
                            Address = "ул. Горна Баня",
                            Country = "България",
                            Details = "Хотелът предлага безплатен високоскоростен WI-FI. Има спа център и 3 вътрешни басейна, както и 2 външни - един за деца, един за възрастни.",
                            HotelName = "Therme",
                            MainImageURL = "Therme.jpg",
                            Rating = 9.0999999999999996,
                            Town = "Баня"
                        },
                        new
                        {
                            HotelID = 4,
                            Address = "Flower str.",
                            Country = "Франция",
                            Details = "Прекрасна гледка към Айфеловата кула. Храната е високо качество, а стаите са прекрасни.",
                            HotelName = "La Fleur",
                            MainImageURL = "LaFleur.jpg",
                            Rating = 9.5,
                            Town = "Paris"
                        },
                        new
                        {
                            HotelID = 5,
                            Address = "Monte Carlo str.",
                            Country = "САЩ",
                            Details = "Хотел Las Vegas Royal предлага всякакви по вид занимания - от масажи до турнири по тенис и футбол. All-Inclisuve с включена храна и напитки",
                            HotelName = "Las Vegas Royal",
                            MainImageURL = "RoyalLasVegas.jpg",
                            Rating = 7.9000000000000004,
                            Town = "Las Vegas"
                        });
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageID"));

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageID");

                    b.HasIndex("HotelID");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageID = 1,
                            HotelID = 1,
                            ImageURL = "Arte1.jpg"
                        },
                        new
                        {
                            ImageID = 2,
                            HotelID = 1,
                            ImageURL = "Arte2.jpg"
                        },
                        new
                        {
                            ImageID = 3,
                            HotelID = 1,
                            ImageURL = "Arte3.jpg"
                        },
                        new
                        {
                            ImageID = 4,
                            HotelID = 2,
                            ImageURL = "RoseGarden1.jpg"
                        },
                        new
                        {
                            ImageID = 5,
                            HotelID = 2,
                            ImageURL = "RoseGarden2.jpg"
                        },
                        new
                        {
                            ImageID = 6,
                            HotelID = 2,
                            ImageURL = "RoseGarden3.jpg"
                        },
                        new
                        {
                            ImageID = 7,
                            HotelID = 2,
                            ImageURL = "RoseGarden4.jpg"
                        },
                        new
                        {
                            ImageID = 8,
                            HotelID = 3,
                            ImageURL = "Therme1.jpg"
                        },
                        new
                        {
                            ImageID = 9,
                            HotelID = 3,
                            ImageURL = "Therme2.jpg"
                        },
                        new
                        {
                            ImageID = 10,
                            HotelID = 3,
                            ImageURL = "Therme3.jpg"
                        },
                        new
                        {
                            ImageID = 11,
                            HotelID = 4,
                            ImageURL = "LaFleur1.jpg"
                        },
                        new
                        {
                            ImageID = 12,
                            HotelID = 4,
                            ImageURL = "LaFleur2.jpg"
                        },
                        new
                        {
                            ImageID = 13,
                            HotelID = 4,
                            ImageURL = "LaFleur3.jpg"
                        },
                        new
                        {
                            ImageID = 14,
                            HotelID = 5,
                            ImageURL = "LasVegasRoyal1.jpg"
                        },
                        new
                        {
                            ImageID = 15,
                            HotelID = 5,
                            ImageURL = "LasVegasRoyal2.jpg"
                        });
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Preferences", b =>
                {
                    b.Property<int>("PreferencesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferencesID"));

                    b.Property<string>("Atmosphere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pricing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tourism")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreferencesID");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<DateOnly>("ArrivalDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("LeavingDate")
                        .HasColumnType("date");

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationID");

                    b.HasIndex("HotelID");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationID = 1,
                            ArrivalDate = new DateOnly(2024, 3, 20),
                            FirstName = "Иван",
                            HotelID = 1,
                            LeavingDate = new DateOnly(2024, 3, 25),
                            PeopleCount = 2,
                            Price = 500.00m,
                            Surname = "Петров"
                        },
                        new
                        {
                            ReservationID = 2,
                            ArrivalDate = new DateOnly(2024, 4, 10),
                            FirstName = "Мария",
                            HotelID = 2,
                            LeavingDate = new DateOnly(2024, 4, 15),
                            PeopleCount = 1,
                            Price = 300.00m,
                            Surname = "Иванова"
                        },
                        new
                        {
                            ReservationID = 3,
                            ArrivalDate = new DateOnly(2024, 5, 10),
                            FirstName = "Петър",
                            HotelID = 1,
                            LeavingDate = new DateOnly(2024, 5, 15),
                            PeopleCount = 3,
                            Price = 750.00m,
                            Surname = "Иванов"
                        },
                        new
                        {
                            ReservationID = 4,
                            ArrivalDate = new DateOnly(2024, 6, 20),
                            FirstName = "Гергана",
                            HotelID = 2,
                            LeavingDate = new DateOnly(2024, 6, 25),
                            PeopleCount = 2,
                            Price = 600.00m,
                            Surname = "Петрова"
                        },
                        new
                        {
                            ReservationID = 5,
                            ArrivalDate = new DateOnly(2024, 7, 1),
                            FirstName = "Стефан",
                            HotelID = 3,
                            LeavingDate = new DateOnly(2024, 7, 5),
                            PeopleCount = 1,
                            Price = 200.00m,
                            Surname = "Георгиев"
                        });
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.ReservedRoom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ReservationID");

                    b.HasIndex("RoomID");

                    b.ToTable("ReservedRooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Count = 1,
                            HotelID = 1,
                            ReservationID = 1,
                            RoomID = 1
                        },
                        new
                        {
                            ID = 2,
                            Count = 1,
                            HotelID = 1,
                            ReservationID = 1,
                            RoomID = 2
                        },
                        new
                        {
                            ID = 3,
                            Count = 1,
                            HotelID = 2,
                            ReservationID = 2,
                            RoomID = 3
                        },
                        new
                        {
                            ID = 4,
                            Count = 2,
                            HotelID = 1,
                            ReservationID = 3,
                            RoomID = 1
                        },
                        new
                        {
                            ID = 5,
                            Count = 1,
                            HotelID = 2,
                            ReservationID = 4,
                            RoomID = 4
                        },
                        new
                        {
                            ID = 6,
                            Count = 1,
                            HotelID = 3,
                            ReservationID = 5,
                            RoomID = 6
                        },
                        new
                        {
                            ID = 7,
                            Count = 1,
                            HotelID = 3,
                            ReservationID = 5,
                            RoomID = 7
                        });
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<int>("CountInHotel")
                        .HasColumnType("int");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<int>("MaxPeopleCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomID = 1,
                            CountInHotel = 5,
                            HotelID = 1,
                            MaxPeopleCount = 2,
                            Price = 100.00m,
                            Type = "studio"
                        },
                        new
                        {
                            RoomID = 2,
                            CountInHotel = 10,
                            HotelID = 1,
                            MaxPeopleCount = 2,
                            Price = 150.00m,
                            Type = "doubleRoom"
                        },
                        new
                        {
                            RoomID = 3,
                            CountInHotel = 8,
                            HotelID = 2,
                            MaxPeopleCount = 3,
                            Price = 200.00m,
                            Type = "tripleRoom"
                        },
                        new
                        {
                            RoomID = 4,
                            CountInHotel = 3,
                            HotelID = 2,
                            MaxPeopleCount = 4,
                            Price = 300.00m,
                            Type = "deluxeRoom"
                        },
                        new
                        {
                            RoomID = 5,
                            CountInHotel = 2,
                            HotelID = 3,
                            MaxPeopleCount = 6,
                            Price = 400.00m,
                            Type = "maisonette"
                        },
                        new
                        {
                            RoomID = 6,
                            CountInHotel = 5,
                            HotelID = 3,
                            MaxPeopleCount = 2,
                            Price = 120.00m,
                            Type = "studio"
                        },
                        new
                        {
                            RoomID = 7,
                            CountInHotel = 3,
                            HotelID = 4,
                            MaxPeopleCount = 2,
                            Price = 90.00m,
                            Type = "studio"
                        },
                        new
                        {
                            RoomID = 8,
                            CountInHotel = 5,
                            HotelID = 4,
                            MaxPeopleCount = 2,
                            Price = 120.00m,
                            Type = "doubleRoom"
                        },
                        new
                        {
                            RoomID = 9,
                            CountInHotel = 4,
                            HotelID = 5,
                            MaxPeopleCount = 3,
                            Price = 180.00m,
                            Type = "tripleRoom"
                        },
                        new
                        {
                            RoomID = 10,
                            CountInHotel = 2,
                            HotelID = 5,
                            MaxPeopleCount = 4,
                            Price = 250.00m,
                            Type = "deluxeRoom"
                        });
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.RoomAvailability", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.ToTable("RoomsAvailability");
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c6e4261-1052-4061-b9d3-e0450f02f94c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAELjpMLk75xz7tlKYy+E6ScVt2JzutJxwQTO4PeJ9O+GFrChyLvHbAlEd52WWveISjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "User",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YourPlace.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YourPlace.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourPlace.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YourPlace.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Categories", b =>
                {
                    b.HasOne("YourPlace.Infrastructure.Data.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Image", b =>
                {
                    b.HasOne("YourPlace.Infrastructure.Data.Entities.Hotel", null)
                        .WithMany("Images")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Reservation", b =>
                {
                    b.HasOne("YourPlace.Infrastructure.Data.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.ReservedRoom", b =>
                {
                    b.HasOne("YourPlace.Infrastructure.Data.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourPlace.Infrastructure.Data.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.RoomAvailability", b =>
                {
                    b.HasOne("YourPlace.Infrastructure.Data.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("YourPlace.Infrastructure.Data.Entities.Hotel", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
